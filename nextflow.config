/*
 * -------------------------------------------------
 * h3achipimputation Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 * Cluster-specific config options should be saved
 * in the conf folder and imported under a profile
 * name here.
 */

// DSL 2 configuration - use stable DSL 2 instead of preview mode
nextflow.enable.dsl = 2

// Global default params, used in configs
params {

  // General options
  name = false
  version = '1.0'
  clusterOptions = false
  help = false
  plaintext_email = false
  hostnames = false
  config_profile_description = false
  config_profile_contact = false
  config_profile_url = false

  outDir = './output'
  tracedir = "${params.outDir}/pipeline_info"

  // TODO Pipeline's command line flags

  chromosomes = "ALL" // Impute all chromosomes by default
  project_name = "h3achipimputation" // Default project name

  // Minimac4 option
  minRatio = '0.01'
  chunk = ''
}

// Default container - use the comprehensive imputation container
process.container = 'mamana/imputation:minimac4-4.1.6'

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

profiles {
  standard { includeConfig 'conf/base.config' }
  test { includeConfig 'conf/test.config' }
  test_local_files { includeConfig 'conf/test_local_files.config' }
  debug { process.beforeScript = 'echo $HOSTNAME' }
  conda { process.conda = "$baseDir/environment.yml" }
  docker {
    docker.enabled = true
    docker.runOptions = '-u root'
    docker.fixOwnership = true
  }
  singularity {
    singularity.enabled = true
    singularity.autoMounts = true
    singularity.pullTimeout = '60m'
    singularity.cacheDir = './singularity_cache'
  }
  slurm {
    includeConfig 'conf/base.config'
    process.executor = 'slurm'
    singularity.enabled = true
    singularity.autoMounts = true
  }
  test_local {
    includeConfig 'conf/test.config'
    // Use local tools without containers
    process.container = null
    docker.enabled = false
    singularity.enabled = false
  }
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

// Improved error handling and resume capability
process {
  // Default error strategy for all processes
  errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
  // Maximum number of retries per process
  maxRetries = 3
  // Maximum number of errors before the pipeline stops (-1 means no limit)
  maxErrors = '-1'
  
  // ========================================
  // RESOURCE ALLOCATION BY PROCESS LABELS
  // ========================================
  
  withLabel: 'small' {
    cpus = { check_max( 1, 'cpus' ) }
    memory = { check_max( 2.GB * task.attempt, 'memory' ) }
    time = { check_max( 2.h * task.attempt, 'time' ) }
    errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
    maxRetries = 2
  }
  
  withLabel: 'medium' {
    cpus = { check_max( 2 * task.attempt, 'cpus' ) }
    memory = { check_max( 4.GB * task.attempt, 'memory' ) }
    time = { check_max( 4.h * task.attempt, 'time' ) }
    errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
    maxRetries = 3
  }
  
  withLabel: 'bigmem' {
    cpus = { check_max( 4 * task.attempt, 'cpus' ) }
    memory = { check_max( 8.GB * task.attempt, 'memory' ) }
    time = { check_max( 8.h * task.attempt, 'time' ) }
    errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
    maxRetries = 3
  }
  
  withLabel: 'bigmem10' {
    cpus = { check_max( 8 * task.attempt, 'cpus' ) }
    memory = { check_max( 16.GB * task.attempt, 'memory' ) }
    time = { check_max( 12.h * task.attempt, 'time' ) }
    errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
    maxRetries = 3
  }
  
  withLabel: 'verylarge' {
    cpus = { check_max( 8 * task.attempt, 'cpus' ) }
    memory = { check_max( 32.GB * task.attempt, 'memory' ) }
    time = { check_max( 24.h * task.attempt, 'time' ) }
    errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
    maxRetries = 3
  }
  
  withLabel: 'bigmem_impute5' {
    cpus = { check_max( 4 * task.attempt, 'cpus' ) }
    memory = { check_max( 16.GB * task.attempt, 'memory' ) }
    time = { check_max( 12.h * task.attempt, 'time' ) }
    errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
    maxRetries = 3
  }
  
  // ========================================
  // CONTAINER ASSIGNMENTS BY LABEL NAME
  // ========================================
  
  // Minimac4 imputation processes
  withLabel: 'impute_minimac4' {
    container = 'mamana/minimac4:minimac4-4.1.6'
  }
  
  // Eagle phasing processes
  withLabel: 'phasing_eagle' {
    container = 'mamana/eagle-vcf-processing:eagle-2.4.1'
  }

  // VCF processing and QC processes (BCFtools, VCFtools, tabix)
  withLabel: 'bcftools' {
    container = 'mamana/vcf-processing:bcftools-1.20'
  }
  // Combined imputation workflows (use comprehensive container)
  withName: 'impute5' {
    container = 'mamana/imputation:minimac4-4.1.6'  // This container should also include impute5
  }
  
  withName: 'generate_impute5_info' {
    container = 'mamana/vcf-processing:bcftools-1.20'
  }
  
  // Python script processes - use imputation container which should have Python
  withName: 'generate_chunks_vcf' {
    container = 'mamana/imputation:minimac4-4.1.6'
  }
  
  // Phasing processes - use comprehensive container that has tabix
  withName: 'minimac4_phasing_eagle' {
    container = 'mamana/eagle-vcf-processing:eagle-2.4.1'
  }
  
  withName: 'impute5_phasing_eagle' {
    container = 'mamana/eagle-vcf-processing:eagle-2.4.1'
  }
  
  // R analysis processes
  withName: 'average_r2|plot_r2_SNPcount|plot_hist_r2_SNPcount|plot_MAF_r2|filter_info_by_target|plot_freq_comparison|plot_r2_SNPpos' {
    container = 'mamana/r-analysis:1.0'
  }
}

timeline {
  enabled = true
  file = "${params.tracedir}/execution_timeline.html"
}
report {
  enabled = true
  file = "${params.tracedir}/execution_report.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/execution_trace.txt"
}
dag {
  enabled = true
  file = "${params.tracedir}/pipeline_dag.svg"
}

manifest {
  name = 'h3achipimputation'
  author = 'H3ABioNet'
  homePage = 'https://github.com/h3abionet/chipimputation'
  description = 'Genotype imputation pipeline for H3Africa'
  mainScript = 'main.nf'
  nextflowVersion = '>=20.04.0'
  version = '1.0dev'
  // schema = "$projectDir/nextflow_schema.json"  // Schema validation requires Nextflow 22.10+
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}

