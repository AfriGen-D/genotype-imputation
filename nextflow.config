/*
========================================================================================
    Genotype Imputation Pipeline v2.0 - Main Configuration
========================================================================================
*/

// Pipeline version
manifest {
    name            = 'genotype-imputation'
    author          = 'H3ABioNet'
    homePage        = 'https://github.com/h3abionet/chipimputation'
    description     = 'Nextflow pipeline for genotype imputation - v2.0 refactored'
    mainScript      = 'main.nf'
    nextflowVersion = '!>=23.04.0'
    version         = '2.0.0'
}

// Global parameters
params {
    // Input/output options
    input                      = null
    outdir                     = './results'
    publish_dir_mode           = 'copy'
    
    // Reference genome options
    genome                     = null
    genome_build               = 'b38' // 'b37' or 'b38'
    reference_panels           = []
    eagle_genetic_map          = null
    reference_genome           = null
    chromosomes                = 'ALL'
    
    // QC options
    qc_min_ac                  = 2
    qc_min_maf                 = 0.01
    qc_max_missing             = 0.05
    qc_hwe_pvalue              = 1e-6
    remove_duplicates          = true
    split_multiallelic         = true
    
    // Performance optimization flags
    skip_missingness_calc      = true   // Skip detailed missingness calculations
    skip_hwe_check            = true   // Skip Hardy-Weinberg equilibrium check
    skip_annotation           = true   // Skip variant annotation
    minimal_qc_mode           = true   // Run only essential QC steps
    
    // Validation options (to speed up pipeline)
    skip_vcf_stats             = true   // Skip detailed VCF statistics in validation
    skip_chr_validation        = true   // Skip chromosome validation check
    skip_ref_compatibility     = true   // Skip reference compatibility check (usually not critical)
    skip_sample_overlap        = true   // Skip sample overlap check (usually not critical)
    
    // Chunking options for parallel processing
    enable_chunking            = true    // Enable VCF chunking for parallel processing
    chunk_size                 = 5000000  // Genomic region size in base pairs (5 Mb) for chunking
    overlap_min_ratio          = 0.00001  // Minimum overlap ratio for chunks and Minimac4 (0.001%)
    
    // Phasing options
    phasing_tool               = 'eagle' // 'eagle', 'shapeit', or 'beagle'
    
    // Imputation options
    imputation_tool            = 'minimac4' // 'minimac4', 'impute5', or 'beagle5'
    impute_info_cutoff         = 0.3
    impute_window              = 500000
    impute_ne                  = 20000
    impute_buffer              = 250000
    
    // Reporting options
    report_level               = 'detailed' // 'summary', 'detailed', or 'full'
    generate_plots             = true
    concordance_analysis       = false
    
    // Computational resources
    max_cpus                   = 16
    max_memory                 = '128.GB'
    max_time                   = '240.h'
    
    // Boilerplate options
    help                       = false
    version                    = false
    validate_params            = true
    show_hidden_params         = false
    schema_ignore_params       = 'genomes,modules'
    email                      = null
    
    // Legacy v1.x parameter mappings for backwards compatibility
    target_datasets            = null  // Maps to 'input'
    ref_panels                 = null  // Maps to 'reference_panels'
    outDir                     = null  // Maps to 'outdir'
    site_miss                  = null  // Maps to 'qc_max_missing'
    hwe                        = null  // Maps to 'qc_hwe_pvalue'
    mac                        = null  // Maps to 'qc_min_ac'
    min_ac                     = null  // Maps to 'qc_min_ac'
    NE                         = null  // Maps to 'impute_ne'
    buffer_size                = null  // Maps to 'impute_buffer'
}

// Load additional configs
includeConfig 'conf/base.config'
includeConfig 'conf/modules.config'

// Container configuration
process {
    container = 'mamana/imputation:minimac4-4.1.6'
    
    withLabel: 'impute_minimac4' {
        container = 'mamana/minimac4:minimac4-4.1.6'
    }
    
    withLabel: 'phasing_eagle' {
        container = 'mamana/eagle-vcf-processing:eagle-2.4.1'
    }
    
    withLabel: 'bcftools' {
        container = 'mamana/vcf-processing:bcftools-1.20'
    }
    
    withLabel: 'python_plotting' {
        container = 'mamana/python-plotting:1.0.0'
    }
}

// Execution profiles
profiles {
    standard {
        docker.enabled = false
        singularity.enabled = false
    }
    
    docker {
        docker.enabled = true
        docker.userEmulation = true
        singularity.enabled = false
    }
    
    singularity {
        singularity.enabled = true
        singularity.autoMounts = true
        docker.enabled = false
    }
    
    slurm {
        process.executor = 'slurm'
        process.queue = 'Main'
    }
    
    test {
        includeConfig 'conf/test.config'
    }
    
    test_full {
        includeConfig 'conf/test_full.config'
    }
    
    // Legacy profile for backward compatibility
    cbio {
        includeConfig 'conf/test_cbio.config'
    }
}

// Capture exit codes
process.shell = ['/bin/bash', '-euo', 'pipefail']

// Execution tracing
def trace_timestamp = new java.util.Date().format('yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.outdir}/pipeline_info/pipeline_dag_${trace_timestamp}.html"
}

// Function to handle legacy parameters
def checkLegacyParams() {
    // Map old parameters to new ones
    if (params.target_datasets && !params.input) {
        params.input = params.target_datasets
        // log.warn "Parameter 'target_datasets' is deprecated. Using 'input' instead."
    }
    if (params.ref_panels && !params.reference_panels) {
        params.reference_panels = params.ref_panels
        // log.warn "Parameter 'ref_panels' is deprecated. Using 'reference_panels' instead."
    }
    if (params.outDir && !params.outdir) {
        params.outdir = params.outDir
        // log.warn "Parameter 'outDir' is deprecated. Using 'outdir' instead."
    }
    if (params.site_miss && !params.qc_max_missing) {
        params.qc_max_missing = params.site_miss
        // log.warn "Parameter 'site_miss' is deprecated. Using 'qc_max_missing' instead."
    }
    if (params.hwe && !params.qc_hwe_pvalue) {
        params.qc_hwe_pvalue = params.hwe
        // log.warn "Parameter 'hwe' is deprecated. Using 'qc_hwe_pvalue' instead."
    }
    if ((params.mac || params.min_ac) && !params.qc_min_ac) {
        params.qc_min_ac = params.mac ?: params.min_ac
        // log.warn "Parameter 'mac/min_ac' is deprecated. Using 'qc_min_ac' instead."
    }
    if (params.NE && !params.impute_ne) {
        params.impute_ne = params.NE
        // log.warn "Parameter 'NE' is deprecated. Using 'impute_ne' instead."
    }
    if (params.buffer_size && !params.impute_buffer) {
        params.impute_buffer = params.buffer_size
        // log.warn "Parameter 'buffer_size' is deprecated. Using 'impute_buffer' instead."
    }
}

// Check for legacy parameters on startup
checkLegacyParams()