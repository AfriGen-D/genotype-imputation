manifest {
    homePage = 'https://github.com/h3abionet/chipimputation/'
    description = ''
    mainScript = 'imputation.nf'
    nextflowVersion = '>=0.31.2'
}

  imputeImage = "h3abionet_org/impute2"

params{

    project_name             = 'IMPUTE'
    project_description      = 'A simple IMPUTE2 run on the "tiny" test datasaset distributed with git repo'
    // Directories
    // homedir: Path to your script, where the nextflow main script is located
    homedir                 = "${projectDir}"

    scratch                 = "/researchdata/fhgfs/mamana"
    output_dir              = "${scratch}/imputation/${project_name}"
    impute_result           = "${params.output_dir}/impute_results"
    scripts                 = "${params.homedir}/scripts"

    // Reference panels
    ref_panels {
        KG {
            dir         = "/researchdata/fhgfs/mamana/reference/REF_PANELS/CBIO"
            m3vcfFile   = "${dir}/M3VCF/h3a_chr%s.m3vcf.gz"
            vcfFile   = "${dir}/VCF/h3a_chr%s.vcf.gz"
            sampleFile  = "${dir}/1000G/HAP/1000GP_Phase3/1000GP_Phase3.sample"
        }
        CBIO {
            dir         = "/researchdata/fhgfs/mamana/reference/REF_PANELS/CBIO"
            m3vcfFile   = "${dir}/M3VCF/h3a_chr%s.m3vcf.gz"
            vcfFile   = "${dir}/VCF/h3a_chr%s.vcf.gz"
            sampleFile  = "${dir}/1000G/HAP/1000GP_Phase3/1000GP_Phase3.sample"
        }
    }

    // Study datasets
    target_datasets {
        // tiny                = "${scratch}/reference/test_data/tiny/study/tiny.yri.vcf.gz"
        qc_three_samples    = "${scratch}/reference/test_data/qc_three_samples/H3AFRICAv1/VCF/threesamples.unphased.H3AFRICAv1_qc_three_samples.vcf.gz"
        qc_three_samples1 = "${scratch}/reference/test_data/qc_three_samples/H3AFRICAv1/VCF/threesamples.unphased.H3AFRICAv1_qc_three_samples.vcf.gz"
    }

    eagle_genetic_map       = "${projectDir}/tables/genetic_map_hg19_withX.txt.gz"
    // TODO put nextflow asset folder variable


    // chunk size in base
    NE                      = "20000"
    impute_iter             = "10"
    impute_burnin           = "2"       // must be less than impute_burnin
    impute_info_cutoff      = "0.8"
    chunk_size              = "20000000"
    buffer_size             = "1000000" // in kb (NB 2*buffer plus chunk must be smaller than 7MB if using IMPUTE2)


    //chromosomes             = "ALL"
    chromosomes             = "21,22"

    // Plink QC parameters
    cut_mind                = "0.999"
    cut_geno                = "0.0001"
    cut_hwe                 = "1E-8"

    // QC
    reference_genome        = "${scratch}/reference/gatk_bundle/human_g1k_v37_decoy.fasta"

    // Imputation method minimac4 (default) or IMPUTE2
    impute_method           = "minimac4"
    // Phasing method: eagle2 (default) or shapeit
    phasing_method          = "eagle"

    // Plink to use, sometimes it can be plink2
    plink="plink"
}

profiles {
    // For execution on a local machine, no containerization. -- Default
    standard {
        process.executor = 'local'
    }
    local {
        params {
            //threadCounts = [ 4 ]
            //alignThreads = 4
            resultsDir = "results"
        }

        executor {
            name = "local"
            //cpus = 4
        }
        docker {
            enabled = false
        }
    }
    // For execution on a PBS scheduler, no containerization.
    pbs {
        process{
            executor        = 'pbs'
            queue           = 'batch'
            memory          = 2.GB
            cpus            = 1
            time            = 1.h
            maxRetries      = 5
            maxErrors       = 10000
            scratch         = 'true'
            errorStrategy   = 'retry'
            // errorStrategy   = { if (task.exitStatus == 143) { 'retry' } else if (task.exitStatus == 140 ) { 'retry' } else if (task.exitStatus == 137 ) { 'retry' } else { 'terminate' } }
            // TODO set scracth folder
        }
    }

    docker {
        process.executor = 'local'
        process.container = imputeImage

        docker.remove      = true
        //docker.runOptions  = '--rm'
        docker.runOptions  = '--rm -u $(id -u):$(id -g)'
        docker.registry    = 'quay.io'
        docker.enabled     = true
        docker.temp        = 'auto'
        docker.fixOwnership= true
        docker.process.executor = 'local'
    }

}

workflow.onComplete = {
    println "========================================="
    println "Pipeline completed at: $workflow.complete"
    println "Description: ${ params.project_description }"
    println "Execution status: ${ workflow.success ? 'OK' : 'failed' }"
}
