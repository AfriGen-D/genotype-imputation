name: Build Python Plotting Container

on:
  push:
    branches: [ main, master, develop ]
    paths:
      - 'containers/python-plotting/**'
      - '.github/workflows/build-python-plotting.yml'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'containers/python-plotting/**'
      - '.github/workflows/build-python-plotting.yml'
  workflow_dispatch:
    inputs:
      force_build:
        description: 'Force rebuild even if no changes'
        required: false
        default: false
        type: boolean

env:
  CONTAINER_NAME: python-plotting
  GHCR_REGISTRY: ghcr.io
  DOCKERHUB_REGISTRY: docker.io
  PRIMARY_VERSION: "1.1.0"
  ADDITIONAL_TAGS: python3.11,matplotlib,seaborn,pyyaml

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.GHCR_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request' && secrets.DOCKERHUB_USERNAME != ''
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKERHUB_REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.GHCR_REGISTRY }}/${{ github.repository_owner }}/${{ env.CONTAINER_NAME }}
            ${{ env.DOCKERHUB_REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.CONTAINER_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=${{ env.PRIMARY_VERSION }},enable={{is_default_branch}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,prefix={{branch}}-
            type=schedule,pattern={{date 'YYYY-MM-DD'}}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: containers/${{ env.CONTAINER_NAME }}
          platforms: linux/amd64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=${{ env.CONTAINER_NAME }}
          cache-to: type=gha,mode=max,scope=${{ env.CONTAINER_NAME }}
          provenance: true
          sbom: true

      - name: Test container
        if: success()
        run: |
          IMAGE="${{ env.GHCR_REGISTRY }}/${{ github.repository_owner }}/${{ env.CONTAINER_NAME }}:${{ env.PRIMARY_VERSION }}"
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            IMAGE="localhost:5000/${{ env.CONTAINER_NAME }}:pr-${{ github.event.number }}"
          fi
          
          echo "Testing container: $IMAGE"
          docker run --rm $IMAGE python --version
          docker run --rm $IMAGE python -c "import yaml; print(f'PyYAML {yaml.__version__} OK')"
          docker run --rm $IMAGE python -c "import numpy, pandas, matplotlib, seaborn; print('All packages OK')"
          
          # Check container size
          SIZE=$(docker image inspect $IMAGE --format='{{.Size}}' 2>/dev/null || echo 0)
          SIZE_MB=$((SIZE / 1024 / 1024))
          echo "Container size: ${SIZE_MB} MB"
          
          if [ $SIZE_MB -gt 600 ]; then
            echo "Warning: Container size exceeds 600 MB"
          fi

      - name: Summary
        if: always()
        run: |
          echo "## Python Plotting Container Build" >> $GITHUB_STEP_SUMMARY
          echo "- **Container**: ${{ env.CONTAINER_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ env.PRIMARY_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tools**: Python 3.11, PyYAML, NumPy, Pandas, Matplotlib, Seaborn" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY