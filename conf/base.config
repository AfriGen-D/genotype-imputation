/*
 * -------------------------------------------------
 * h3achipimputation Nextflow base config file
 * -------------------------------------------------
 * A 'blank slate' config file, appropriate for general
 * use on most high performace compute environments.
 * Assumes that all software is installed and available
 * on the PATH. Runs in `local` mode - all jobs will be
 * run on the logged in environment.
 */

process {
  // Default resource requirements for all processes
  cpus = { check_max( 1 * task.attempt, 'cpus' ) }
  memory = { check_max( 4.GB * task.attempt, 'memory' ) }
  time = { check_max( 4.h * task.attempt, 'time' ) }

  stageOutMode = 'rsync'

  // Default error handling
  errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
  maxRetries = 3
  maxErrors = '-1'

  // Process-specific resource requirements based on task labels
  withLabel: 'small' {
    cpus = { check_max( 1, 'cpus' ) }
    memory = { check_max( 2.GB * task.attempt, 'memory' ) }
    time = { check_max( 2.h * task.attempt, 'time' ) }
  }

  withLabel: 'medium' {
    cpus = { check_max( 2 * task.attempt, 'cpus' ) }
    memory = { check_max( 8.GB * task.attempt, 'memory' ) }
    time = { check_max( 8.h * task.attempt, 'time' ) }
    errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
  }

  withLabel: 'bigmem' {
    cpus = { check_max( 4 * task.attempt, 'cpus' ) }
    memory = { check_max( 16.GB * task.attempt, 'memory' ) }
    time = { check_max( 12.h * task.attempt, 'time' ) }
    errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
  }

  // Process-specific resource allocation by process name
  withName: 'impute_minimac4.*' {
    cpus = { check_max( Math.min(4, 2 * task.attempt), 'cpus' ) }
    memory = { check_max( Math.min(32.GB, 8.GB * task.attempt), 'memory' ) }
    time = { check_max( Math.min(24.h, 8.h * task.attempt), 'time' ) }
  }

  withName: 'minimac4_phasing_eagle' {
    cpus = { check_max( Math.min(4, 2 * task.attempt), 'cpus' ) }
    memory = { check_max( Math.min(16.GB, 8.GB * task.attempt), 'memory' ) }
    time = { check_max( Math.min(12.h, 6.h * task.attempt), 'time' ) }
  }

  withName: 'generate_chunks_vcf|split_target_to_chunk' {
    cpus = 1
    memory = { check_max( 4.GB * task.attempt, 'memory' ) }
    time = { check_max( 1.h * task.attempt, 'time' ) }
  }

  withName: 'report_.*' {
    cpus = 1
    memory = { check_max( 4.GB * task.attempt, 'memory' ) }
    time = { check_max( 2.h * task.attempt, 'time' ) }
  }

  withName: 'plot_.*' {
    cpus = 1
    memory = { check_max( 4.GB * task.attempt, 'memory' ) }
    time = { check_max( 2.h * task.attempt, 'time' ) }
  }
}

params {
  // Default maximum resources - can be overridden in profiles
  max_memory = 128.GB
  max_cpus = 16
  max_time = 240.h
}

