config = ''


manifest {
    homePage = 'https://github.com/h3abionet/chipimputation/'
    description = ''
    mainScript = 'imputation.nf'
}

params {
    // Directories
    homedir                 = "${HOME}/imputation"
    output_dir              = "/researchdata/fhgfs/mamana/imputation"
    impute_result           = "${output_dir}/impute_results"
    scripts                 = "${params.homedir}/scripts"

    // Reference data
    ref_dir                 = "${output_dir}/data/ref"
    ref_hapFile             = "${ref_dir}/1000GP_Phase3_chr%s.hap.gz"
    ref_legendFile          = "${ref_dir}/1000GP_Phase3_chr%s.legend.gz"
    ref_mapFile             = "${ref_dir}/genetic_map_chr%s_combined_b37.txt"
    ref_sampleFile          = "${ref_dir}/1000GP_Phase3.sample"

    // chunk size in base
    chunk_size              = "1000000"

    // Data // in PLINK bed format
    bedFile                 = "${output_dir}/data/raw/tiny.yri.bed"
    famFile                 = "${output_dir}/data/raw/tiny.yri.fam"
    bimFile                 = "${output_dir}/data/raw/tiny.yri.bim"
    chromosomes             = "22"

    // Plink QC parameters
    cut_mind                = "0.05"
}

executor{
    jobName = { "$task.tag" }
}

profiles {
    // For execution on a local machine, no containerization. -- Default
    standard {
        process.executor = 'local'
    }
    local {
        params {
            //threadCounts = [ 4 ]
            //alignThreads = 4
            resultsDir = "results"
        }

        executor {
            name = "local"
            //cpus = 4
        }
        docker {
            enabled = false
        }
    }
    // For execution on a PBS scheduler, no containerization.
    pbs {
        process{
            executor        = 'pbs'
            queue           = 'UCTlong'
            memory          = 2.GB
            cpus            = { 2 * task.attempt } // Simply set to 1 if cluster does not depend on core ratio like UCT HPC, to only dynamically use memory
            time            = 2.h
            maxRetries      = 10
            maxErrors       = 10
            errorStrategy   = { if (task.exitStatus == 143) { 'retry' } else if (task.exitStatus == 140 ) { 'retry' } else if (task.exitStatus == 137 ) { 'retry' } else { 'terminate' } }
            scratch         = "${params.output_dir}/TMP/"
        }
    }
}

workflow.onComplete = {
    println "========================================="
    println "Pipeline completed at: $workflow.complete"
    println "Execution status: ${ workflow.success ? 'OK' : 'failed' }"
}
